// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum CompanyRole {
  MANAGER
  COMANAGER
  DENTIST
  DENTALTECHNICIAN
  ASSISTANT
  PENDING
}

model Company {
  id                         String                @id @default(uuid())
  name                       String?
  description                String?
  managerId                  String
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  isDeleted                  Boolean               @default(false)
  manager                    Manager               @relation(fields: [managerId], references: [id])
  members                    Member[]
  patients                   Patient[]
  transactionCategories      TransactionCategory[]
  DentalTechnicianCategories DentalTechCategory[]
  expensesCategories         ExpensesCategory[]
  scheduleCategories         ScheduleCategory[]
  addOnItems AddonItem[]
  expenses                   Expenses[]
  dentalTech                 Dentaltech[]
  schedule                   Schedule[]
  recheck                    Recheck[]


  @@index([managerId], name: "idx_company_all")
  @@index([isDeleted], name: "idx_company")
}

model User {
  id                 String    @id @default(uuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  phone              String?
  image              String?
  password           String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isTwoFactorEnabled Boolean   @default(false)
  accounts           Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  manager               Manager?
  member                Member?
  dentaltech            Dentaltech[] @relation("CreatedTech")
  updatedTech           Dentaltech[] @relation("UpdatedTech")
  patient               Patient[] @relation("CreatedPatients")
  updatedPatients       Patient[]              @relation("UpdatedPatients")
  transactions   Transaction[] @relation("CreatedTransactions")
  updatedTransactions   Transaction[] @relation("UpdatedTransactions")
  dentalTechCategory    DentalTechCategory[]
  scheduleCreator       Schedule[]             @relation("idx_schedule_creator")
  scheduleDentist       Schedule[]             @relation("idx_schedule_dentist")
  updatedSchedule         Schedule[]             @relation("UpdatedSchedule")
  recheck               Recheck[]
  updatedRecheckList    RecheckList[] @relation("UpdatedRecheckList")
}

model Manager {
  id                    String                @id @unique
  role                  CompanyRole           @default(MANAGER)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  user                  User                  @relation(fields: [id], references: [id], onDelete: Cascade)
  companies             Company[]
  members               Member[]
  transactionCategories TransactionCategory[]
  scheduleCategories    ScheduleCategory[]
  expensesCategories    ExpensesCategory[]
  addOnItems AddonItem[]
  createdExpenses      Expenses[] @relation("CreatedExpenses")
  updatedExpenses      Expenses[] @relation("UpdatedExpenses")
}

model Member {
  id         String      @id @unique
  memberCode String?
  role       CompanyRole @default(PENDING)
  companyId  String
  managerId  String
  status     String      @default("ACTIVE")
  isDeleted  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user    User    @relation(fields: [id], references: [id])
  company Company @relation(fields: [companyId], references: [id])
  manager Manager @relation(fields: [managerId], references: [id])

  @@unique([id, companyId])
  @@index([companyId, managerId], name: "idx_member_all")
  @@index([isDeleted, companyId, managerId], name: "idx_member")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model TransactionCategory {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float?
  managerId   String
  companyId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isDeleted    Boolean       @default(false)
  transactions Transaction[]
  recheckList  RecheckList[]
  schedule     Schedule[]

  manager Manager @relation(fields: [managerId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@unique([name, companyId])
  @@index([companyId, isDeleted], name: "idx_tc")
  @@index([companyId], name: "idx_tc_all")
}

model DentalTechCategory {
  id            String  @id @default(cuid())
  name          String
  description   String?
  creatorUserId String
  companyId  String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  isDeleted  Boolean      @default(false)
  dentalTech Dentaltech[]
  company    Company      @relation(fields: [companyId], references: [id])
  creator    User         @relation(fields: [creatorUserId], references: [id])

  @@unique([name, companyId])
  @@index([companyId, isDeleted], name: "idx_dtc")
  @@index([companyId], name: "idx_dtc_all")
}

model ExpensesCategory {
  id          String  @id @default(cuid())
  name        String
  description String?
  color       String?
  managerId   String

  companyId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  isDeleted Boolean    @default(false)
  expenses  Expenses[]
  company   Company    @relation(fields: [companyId], references: [id])
  manager   Manager    @relation(fields: [managerId], references: [id])

  @@unique([name, companyId])
  @@index([companyId, isDeleted], name: "idx_ex")
  @@index([companyId], name: "idx_ex_all")
}

model ScheduleCategory {
  id          String        @id @default(cuid())
  name        String
  order       Int
  managerId   String
  companyId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isDeleted   Boolean       @default(false)
  schedule    Schedule[]
  recheckList RecheckList[]
  manager     Manager       @relation(fields: [managerId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@unique([name, companyId])
  @@index([companyId, isDeleted], name: "idx_ac")
  @@index([companyId], name: "idx_ac_all")
}

model AddonItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  unitPrice   Float    ?
  stock       Int      
  companyId   String
  managerId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  manager Manager @relation(fields: [managerId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  transactionAddons TransactionAddon[]

  @@unique([name, companyId])
  @@index([companyId, isDeleted])
}


model Patient {
  id            String        @id @default(cuid())
  name          String
  phone         String?
  age           String?
  address       String?
  job           String?
  work          String?
  worktel       String?
  cd            String?
  drug          String?
  companyId     String
  creatorUserId String
  updaterUserId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isDeleted     Boolean       @default(false)
  transactions  Transaction[]
  dentaltech    Dentaltech[]
  recheck       Recheck[]
  company       Company       @relation(fields: [companyId], references: [id])
  creator       User          @relation("CreatedPatients", fields: [creatorUserId], references: [id])
  updater       User?         @relation("UpdatedPatients", fields: [updaterUserId], references: [id])

  @@unique([name, companyId])
  @@index([companyId], name: "idx_patient_all")
  @@index([creatorUserId], name: "idx_patient_creator")
  @@index([companyId, isDeleted], name: "idx_patient")
}

model Transaction {
  id                    String              @id @default(cuid())
  datetime              DateTime            @default(now())
  detail                String?
  price                 Float
  paid                  Float
  patientId             String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  isDelete              Boolean             @default(false)
  creatorUserId         String
  updaterUserId         String?
  transactionCategoryId String
  transactionAddons TransactionAddon[]
  recheck               Recheck?
  dentaltech            Dentaltech?
  patient               Patient             @relation(fields: [patientId], references: [id])
  transactionCategory   TransactionCategory @relation(fields: [transactionCategoryId], references: [id])

  creator User @relation("CreatedTransactions", fields: [creatorUserId], references: [id])
  updater User? @relation("UpdatedTransactions", fields: [updaterUserId], references: [id])

  @@index([patientId, isDelete], name: "idx_transaction_patient")
  @@index([creatorUserId, isDelete], name: "idx_transaction_creator")
}

model TransactionAddon {
  id             String   @id @default(cuid())
  transactionId  String
  addonItemId   String
  quantity      Int
  price    Float       
  createdAt     DateTime     @default(now())

  transaction Transaction @relation(fields: [transactionId], references: [id])
  addonItem   AddonItem   @relation(fields: [addonItemId], references: [id])

  @@index([addonItemId])
}


model Dentaltech {
  id                 String             @id @unique
  detail             String?
  level              String             @default("ปกติ")
  status             String             @default("รอดำเนินการ")
  deadline           DateTime           @default(now())
  teeth              Float              @default(1)
  price              Float?
  postit             String?
  patientId          String
  dctId              String
  transactionId      String
  companyId          String
  creatorUserId      String
  updaterUserId      String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  transaction        Transaction        @relation(fields: [id], references: [id])
  creator            User               @relation("CreatedTech",fields: [creatorUserId], references: [id])
  updater            User?              @relation("UpdatedTech",fields: [updaterUserId], references: [id])
  company            Company            @relation(fields: [companyId], references: [id])
  dentalTechCategory DentalTechCategory @relation(fields: [dctId], references: [id])
  patient            Patient            @relation(fields: [patientId], references: [id])

  @@index([companyId], name: "idx_dentaltech_all")
}

model Expenses {
  id       String   @id @default(cuid())
  datetime DateTime @default(now())
  name     String
  ecId     String
  payment  String
  amount   Float
  companyId        String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  createdManagerId String
  updatedManagerId String?
  isDeleted        Boolean          @default(false)
  createdManager   Manager          @relation("CreatedExpenses", fields: [createdManagerId], references: [id])
  updatedManager   Manager?         @relation("UpdatedExpenses", fields: [updatedManagerId], references: [id])
  expensesCategory ExpensesCategory @relation(fields: [ecId], references: [id])
  company          Company          @relation(fields: [companyId], references: [id])

  @@index([companyId], name: "idx_expenses_all")
  @@index([companyId, datetime], name: "idx_expenses_datetime")
  @@index([ecId, companyId], name: "idx_expenses_ec")
}

model Schedule {
  id                  String              @id @default(cuid())
  datetime            DateTime            @default(now())
  phone               String?
  patientName         String?
  tcId                String
  detail              String?
  scheduleId          String
  creatorUserId       String
  updaterUserId       String?
  status              String              @default("รอดำเนินการ")
  memberId            String
  companyId           String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  transactionCategory TransactionCategory @relation(fields: [tcId], references: [id])
  scheduleCategory    ScheduleCategory    @relation(fields: [scheduleId], references: [id])
  company             Company             @relation(fields: [companyId], references: [id])
  dentist             User                @relation(fields: [memberId], references: [id], name: "idx_schedule_dentist")
  creator             User                @relation(fields: [creatorUserId], references: [id], name: "idx_schedule_creator")
  updater             User?               @relation("UpdatedSchedule", fields: [updaterUserId], references: [id])

  @@index([companyId], name: "idx_schedule_all")
  @@index([datetime, companyId], name: "idx_schedule_datetime")
}

model Recheck {
  id            String        @id @unique
  patientId     String
  companyId     String
  creatorUserId String
  createdAt     DateTime      @default(now())
  recheckList   RecheckList[]
  transaction   Transaction   @relation(fields: [id], references: [id])
  patient       Patient       @relation(fields: [patientId], references: [id])
  company       Company       @relation(fields: [companyId], references: [id])
  creator       User          @relation(fields: [creatorUserId], references: [id])

  @@index([companyId], name: "idx_recheck_all")
}

model RecheckList {
  id                    String              @id @default(cuid())
  datetime              DateTime            @default(now())
  detail                String?
  price                 Float?
  scheduleId            String
  recheckId             String
  transactionCategoryId String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  updatedUserId        String?
  isConfirmed           Boolean             @default(false)
  scheduleCategory      ScheduleCategory    @relation(fields: [scheduleId], references: [id])
  recheck               Recheck             @relation(fields: [recheckId], references: [id])
  transactionCategory   TransactionCategory @relation(fields: [transactionCategoryId], references: [id])
  updatedUser          User?               @relation("UpdatedRecheckList",fields: [updatedUserId], references: [id])

  @@index([recheckId], name: "idx_rechecklist_all")
}
