// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum CompanyRole {
  MANAGER
  COMANAGER
  DENTIST
  DENTALTECHNICIAN
  ASSISTANT
  PENDING
}

model Company {
  id          String   @id @default(uuid())
  name        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  managerId      String   
  manager        User     @relation(fields: [managerId], references: [id])
  members     Member[]
  patients    Patient[]
  transactions Transaction[]
  transactionCategories TransactionCategory[]
  isDeleted   Boolean  @default(false)
  @@unique([managerId])
}
model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  phone                 String?
  image                 String?
  password              String?
  role                  CompanyRole            @default(MANAGER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  companies               Company[]
  members               Member[]
  transactionCategories TransactionCategory[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Member{
  id                    String   @id @default(uuid())
  name                  String?
  email                 String   @unique
  emailVerified         DateTime?
  phone                 String?
  image                 String?
  password              String?
  memberCode            String
  role                  CompanyRole @default(PENDING)
  isTwoFactorEnabled    Boolean                @default(true)
  twoFactorConfirmation MemberTwoFactorConfirmation?
  companyId             String
  company               Company @relation(fields: [companyId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  managerId          String
  manager       User @relation(fields: [managerId], references: [id])
  status                String? @default("ACTIVE")
  isDeleted Boolean @default(false)
  @@index([companyId])
  @@index([email])    

  @@unique([email, companyId])
}

model Account {
  id                String  @id @default(cuid())
  managerId         String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  manager User @relation(fields: [managerId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  managerId String
  manager   User   @relation(fields: [managerId], references: [id], onDelete: Cascade)

  @@unique([managerId])
}

model MemberTwoFactorConfirmation {
  id       String  @id @default(cuid())
  memberId String
  member   Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([memberId])
}

model TransactionCategory{
  id String @id @default(cuid())
  name String
  managerId String
  user User @relation(fields: [managerId], references: [id])
  companyId String
  company Company @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactions Transaction[]
  isDeleted Boolean @default(false)
  @@unique([managerId])
}

model Patient{
  id String @id @default(cuid())
  name String @unique
  phone String?
  age Int?
  address String?
  job String?
  work String?
  worktel String?
  cd String?
  drug String?
  companyId String
  company Company @relation(fields: [companyId], references: [id])
  createdById String
  createdByType CompanyRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)
  transactions Transaction[]
  @@index([name, phone, job])
  @@index([createdById, createdByType])
}

model Transaction{
  id String @id @default(cuid())
  datetime DateTime @default(now())
  name String
  detail String?
  price Float
  paid Float
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])
  transactionCategoryId String
  transactionCategory TransactionCategory @relation(fields: [transactionCategoryId], references: [id])
  companyId String
  company Company @relation(fields: [companyId], references: [id])
  createdById String
  createdByType CompanyRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

