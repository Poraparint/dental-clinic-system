// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum CompanyRole {
  MANAGER
  COMANAGER
  DENTIST
  DENTALTECHNICIAN
  ASSISTANT
  PENDING
}

model Company {
  id                         String                @id @default(uuid())
  name                       String?
  description                String?
  managerId                  String
  manager                    Manager               @relation(fields: [managerId], references: [id])
  members                    Member[]
  patients                   Patient[]
  transactionCategories      TransactionCategory[]
  DentalTechnicianCategories DentalTechCategory[]
  expensesCategories ExpensesCategory[]
  appointmentCategories AppointmentCategory[]
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  isDeleted                  Boolean               @default(false)
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  phone                 String?
  image                 String?
  password              String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  manager               Manager?
  member                Member?
  patient               Patient[]
  transaction           Transaction[]
  dentalTechCategory    DentalTechCategory[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Manager {
  id                         String                @id @unique
  role                       CompanyRole           @default(MANAGER)
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  user                       User                  @relation(fields: [id], references: [id], onDelete: Cascade)
  companies                  Company[]
  members                    Member[]
  transactionCategories      TransactionCategory[]
  appointmentCategories AppointmentCategory[]
  expensesCategories ExpensesCategory[]
}

model Member {
  id                         String               @id @unique
  memberCode                 String?
  role                       CompanyRole          @default(PENDING)
  companyId                  String
  managerId                  String
  status                     String               @default("ACTIVE")
  isDeleted                  Boolean              @default(false)
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt

  user    User    @relation(fields: [id], references: [id])
  company Company @relation(fields: [companyId], references: [id])
  manager Manager @relation(fields: [managerId], references: [id])

  @@unique([id, companyId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model TransactionCategory {
  id           String        @id @default(cuid())
  name         String
  description  String?
  price        Float?
  managerId    String
  manager      Manager       @relation(fields: [managerId], references: [id])
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  isDeleted    Boolean       @default(false)

  @@unique([name, companyId])
}

model DentalTechCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  creatorUserId String
  creator       User          @relation(fields: [creatorUserId], references: [id])
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  dentalTech  Dentaltech[]

  @@unique([name, companyId])
}

model ExpensesCategory{
  id          String   @id @default(cuid())
  name        String
  description String?
  managerId    String
  manager      Manager       @relation(fields: [managerId], references: [id])
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  @@unique([name, companyId])
}

model AppointmentCategory{
  id          String   @id @default(cuid())
  name        String
  managerId    String
  manager      Manager       @relation(fields: [managerId], references: [id])
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  @@unique([name, companyId])
}

model Patient {
  id            String        @id @default(cuid())
  name          String
  phone         String?
  age           String?
  address       String?
  job           String?
  work          String?
  worktel       String?
  cd            String?
  drug          String?
  companyId     String
  creatorUserId String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isDeleted     Boolean       @default(false)
  transactions  Transaction[]
  dentaltech    Dentaltech[]
  company       Company       @relation(fields: [companyId], references: [id])
  creator       User          @relation(fields: [creatorUserId], references: [id])

  @@unique([name, companyId])
  @@index([name, phone, job])
  @@index([creatorUserId])
}

model Transaction {
  id                    String              @id @default(cuid())
  datetime              DateTime            @default(now())
  detail                String?
  price                 Float
  paid                  Float
  patientId             String
  patient               Patient             @relation(fields: [patientId], references: [id])
  transactionCategoryId String
  transactionCategory   TransactionCategory @relation(fields: [transactionCategoryId], references: [id])
  creatorUserId         String
  creator               User                @relation(fields: [creatorUserId], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  isDelete              Boolean             @default(false)
}

model Dentaltech {
  id        String   @id @default(cuid())
  detail    String?
  level     String   @default("ปกติ")
  status    String   @default("รอดำเนินการ")
  deadline  DateTime @default(now())
  price                 Float?
  postit    String?
  patientId String
  dctId String
  dentalTechCategory DentalTechCategory @relation(fields: [dctId], references: [id])
  patient   Patient  @relation(fields: [patientId], references: [id])
}


